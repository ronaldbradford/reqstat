#!/usr/bin/php
<?php
/**
 * Name:     reqstat
 * Purpose:  Report Request Statistics
 * Author:   Ronald Bradford  http://ronaldbradford.com
 * Website:  https://github.com/ronaldbradford/reqstat
 */

const COMMA = ',';
const NEWLINE ="\n";

function configure_memcached($server) {
  $m = new Memcached();
  $m->addServer($server, 11211);
  $rc = $m->getResultCode();
  if ($rc != Memcached::RES_SUCCESS) {
    print "ERROR:  [$rc] Unable to add $server to memcached list\n";
    exit(1);
  }
  $m->setOption(Memcached::OPT_PREFIX_KEY, 'reqstat:');
  $rc = $m->getResultCode();
  if ($rc != Memcached::RES_SUCCESS) {
    print "ERROR:  [$rc] Unable to set memcached option\n";
    exit(1);
  }
  return $m;
}

function iteration($frequency, $duration, $m) {
  $count =0;
  $last_stats = array();
  $variables = get_variables($m);
  if (empty($variables)) {
    print "ERROR: Memcached is not configured with variables monitoried\n";
    exit(4);
  }
  output_header();
  while  ($duration == 0 || $count <= $duration) {
    $stats = gather_stats($m,$variables);
    output_stats($last_stats, $stats, $frequency);
    $last_stats = $stats;
    sleep($frequency);
    $count += 1;
  }

  return;
}

function get_variables($m) {
  $variables = $m->get('variables');
  $rc = $m->getResultCode();
  if ($rc != Memcached::RES_SUCCESS) {
    print "ERROR:  [$rc] Unable to obtain memcached variable list\n";
    exit(3);
  }
  return split(COMMA,$variables);

}

function gather_stats($m, $variables) {
  //$stats = $m->getMulti(array('completed_requests','requests','total_request_time','last_request_time','request_threshold','excess_requests','last_excess_request_time'));
  $stats = $m->getMulti($variables);
  $rc = $m->getResultCode();
  if ($rc != Memcached::RES_SUCCESS) {
    print "ERROR:  [$rc] Unable to correct obtain memcached status\n";
    exit(2);
  }
  $stats['now'] = time();
  return $stats;

}

function output_header() {
  ob_start();
  ob_implicit_flush(true);
  print 'epoch,time,rps,avg_req,last,%comp' ;
  print ',---,threshold,exceed,last_excess';
  print NEWLINE;
  ob_flush();

  return;
}

function output_stats($from, $to, $freq) {
  if (empty($from)) return;
  $rps = round(($to['completed_requests'] - $from['completed_requests']) / $freq);

  // Catch divide by zero
  if ($rps == 0 ) {
    $avg_latency = '';
  } else {
    $avg_latency =  number_format(($to['total_request_time'] - $from['total_request_time']) / $freq / $rps,2,'.','');
  }
  $new_requests = $to['requests'] - $from['requests'];
  if ($new_requests == 0 ) {
    $pct_comp = '';
  } else { 
    $pct_comp  =  round(( ($to['completed_requests'] - $from['completed_requests']) / $new_requests ) * 100.0);
  }

  $excess = round(($to['excess_requests'] - $from['excess_requests']) / $freq);
  print $to['now']. COMMA . date('His',$to['now']). COMMA . $rps . COMMA . $avg_latency . COMMA . $to['last_request_time'] . COMMA . $pct_comp;
  print COMMA . '---' . COMMA .  $to['request_threshold'] . COMMA . $excess . COMMA . $to['last_excess_request_time'];
  print NEWLINE;
  ob_flush();

  return;
}

function main($argc, $argv) {
  $frequency = 5;
  $duration = 12;
  $server = "localhost";

  if ($argc > 1) $frequency = $argv[1];
  if ($argc > 2) $duration = $argv[2];
  if ($argc > 3) $server = $argv[3];

  $m = configure_memcached($server);
  iteration($frequency, $duration, $m);
  ob_end_flush();
  return;
}

main($argc, $argv);

?>
